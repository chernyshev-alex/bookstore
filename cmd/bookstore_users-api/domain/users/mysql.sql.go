// Code generated by sqlc. DO NOT EDIT.
// source: mysql.sql

package users

import (
	"context"
	"database/sql"
	"time"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser)
	return err
}

const findByEMailAndPsw = `-- name: FindByEMailAndPsw :many
SELECT id, first_name,last_name,email,date_created, status FROM users WHERE email=$1 and password=$2 and status=$3
`

type FindByEMailAndPswRow struct {
	ID          int32          `json:"id"`
	FirstName   sql.NullString `json:"firstName"`
	LastName    sql.NullString `json:"lastName"`
	Email       string         `json:"email"`
	DateCreated time.Time      `json:"dateCreated"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) FindByEMailAndPsw(ctx context.Context) ([]FindByEMailAndPswRow, error) {
	rows, err := q.query(ctx, q.findByEMailAndPswStmt, findByEMailAndPsw)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindByEMailAndPswRow
	for rows.Next() {
		var i FindByEMailAndPswRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.DateCreated,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findByStatus = `-- name: FindByStatus :many
SELECT id, first_name,last_name,email,date_created, status FROM users WHERE status=$1
`

type FindByStatusRow struct {
	ID          int32          `json:"id"`
	FirstName   sql.NullString `json:"firstName"`
	LastName    sql.NullString `json:"lastName"`
	Email       string         `json:"email"`
	DateCreated time.Time      `json:"dateCreated"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) FindByStatus(ctx context.Context) ([]FindByStatusRow, error) {
	rows, err := q.query(ctx, q.findByStatusStmt, findByStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindByStatusRow
	for rows.Next() {
		var i FindByStatusRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.DateCreated,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUser = `-- name: FindUser :one
SELECT id, first_name,last_name,email, date_created, status FROM users WHERE id=$1
`

type FindUserRow struct {
	ID          int32          `json:"id"`
	FirstName   sql.NullString `json:"firstName"`
	LastName    sql.NullString `json:"lastName"`
	Email       string         `json:"email"`
	DateCreated time.Time      `json:"dateCreated"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) FindUser(ctx context.Context) (FindUserRow, error) {
	row := q.queryRow(ctx, q.findUserStmt, findUser)
	var i FindUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.DateCreated,
		&i.Status,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (first_name,last_name,email,date_created, status, password) VALUES ($1, $2, $3, $4, $5, $6)
`

func (q *Queries) InsertUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET first_name=$2,last_name=$3,email=$4 WHERE id = $1
`

func (q *Queries) UpdateUser(ctx context.Context) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser)
	return err
}
