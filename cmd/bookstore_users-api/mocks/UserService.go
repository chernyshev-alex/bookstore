// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	models "github.com/chernyshev-alex/bookstore/cmd/bookstore_users_api/models"
	rest_errors "github.com/chernyshev-alex/bookstore/pkg/bookstore_utils_go/rest_errors"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: _a0
func (_m *UserService) CreateUser(_a0 models.User) (*models.User, rest_errors.RestErr) {
	ret := _m.Called(_a0)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(models.User) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 rest_errors.RestErr
	if rf, ok := ret.Get(1).(func(models.User) rest_errors.RestErr); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(rest_errors.RestErr)
		}
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *UserService) DeleteUser(_a0 int64) rest_errors.RestErr {
	ret := _m.Called(_a0)

	var r0 rest_errors.RestErr
	if rf, ok := ret.Get(0).(func(int64) rest_errors.RestErr); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rest_errors.RestErr)
		}
	}

	return r0
}

// GetUser provides a mock function with given fields: _a0
func (_m *UserService) GetUser(_a0 int64) (*models.User, rest_errors.RestErr) {
	ret := _m.Called(_a0)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(int64) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 rest_errors.RestErr
	if rf, ok := ret.Get(1).(func(int64) rest_errors.RestErr); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(rest_errors.RestErr)
		}
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0
func (_m *UserService) LoginUser(_a0 models.LoginRequest) (*models.User, rest_errors.RestErr) {
	ret := _m.Called(_a0)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(models.LoginRequest) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 rest_errors.RestErr
	if rf, ok := ret.Get(1).(func(models.LoginRequest) rest_errors.RestErr); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(rest_errors.RestErr)
		}
	}

	return r0, r1
}

// SearchUsersByStatus provides a mock function with given fields: _a0
func (_m *UserService) SearchUsersByStatus(_a0 string) ([]models.User, rest_errors.RestErr) {
	ret := _m.Called(_a0)

	var r0 []models.User
	if rf, ok := ret.Get(0).(func(string) []models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 rest_errors.RestErr
	if rf, ok := ret.Get(1).(func(string) rest_errors.RestErr); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(rest_errors.RestErr)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UserService) UpdateUser(_a0 bool, _a1 models.User) (*models.User, rest_errors.RestErr) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(bool, models.User) *models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 rest_errors.RestErr
	if rf, ok := ret.Get(1).(func(bool, models.User) rest_errors.RestErr); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(rest_errors.RestErr)
		}
	}

	return r0, r1
}
